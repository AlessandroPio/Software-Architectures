Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> G_user
Rule 1     G_user -> F1
Rule 2     G_user -> f
Rule 3     F1 -> LPARENT F2 RPARENT
Rule 4     F1 -> ONEOF LPARENT F3 RPARENT
Rule 5     F1 -> SEQ LPARENT F3 RPARENT
Rule 6     F2 -> F2 AND F2
Rule 7     F2 -> F2 OR F2
Rule 8     F2 -> f
Rule 9     F3 -> f SEMICOLON F3
Rule 10    F3 -> f

Terminals, with rules where they appear

AND                  : 6
LPARENT              : 3 4 5
ONEOF                : 4
OR                   : 7
RPARENT              : 3 4 5
SEMICOLON            : 9
SEQ                  : 5
error                : 
f                    : 2 8 9 10

Nonterminals, with rules where they appear

F1                   : 1
F2                   : 3 6 6 7 7
F3                   : 4 5 9
G_user               : 0

Parsing method: LALR

state 0

    (0) S' -> . G_user
    (1) G_user -> . F1
    (2) G_user -> . f
    (3) F1 -> . LPARENT F2 RPARENT
    (4) F1 -> . ONEOF LPARENT F3 RPARENT
    (5) F1 -> . SEQ LPARENT F3 RPARENT

    f               shift and go to state 3
    LPARENT         shift and go to state 4
    ONEOF           shift and go to state 5
    SEQ             shift and go to state 6

    G_user                         shift and go to state 1
    F1                             shift and go to state 2

state 1

    (0) S' -> G_user .



state 2

    (1) G_user -> F1 .

    $end            reduce using rule 1 (G_user -> F1 .)


state 3

    (2) G_user -> f .

    $end            reduce using rule 2 (G_user -> f .)


state 4

    (3) F1 -> LPARENT . F2 RPARENT
    (6) F2 -> . F2 AND F2
    (7) F2 -> . F2 OR F2
    (8) F2 -> . f

    f               shift and go to state 8

    F2                             shift and go to state 7

state 5

    (4) F1 -> ONEOF . LPARENT F3 RPARENT

    LPARENT         shift and go to state 9


state 6

    (5) F1 -> SEQ . LPARENT F3 RPARENT

    LPARENT         shift and go to state 10


state 7

    (3) F1 -> LPARENT F2 . RPARENT
    (6) F2 -> F2 . AND F2
    (7) F2 -> F2 . OR F2

    RPARENT         shift and go to state 11
    AND             shift and go to state 12
    OR              shift and go to state 13


state 8

    (8) F2 -> f .

    RPARENT         reduce using rule 8 (F2 -> f .)
    AND             reduce using rule 8 (F2 -> f .)
    OR              reduce using rule 8 (F2 -> f .)


state 9

    (4) F1 -> ONEOF LPARENT . F3 RPARENT
    (9) F3 -> . f SEMICOLON F3
    (10) F3 -> . f

    f               shift and go to state 15

    F3                             shift and go to state 14

state 10

    (5) F1 -> SEQ LPARENT . F3 RPARENT
    (9) F3 -> . f SEMICOLON F3
    (10) F3 -> . f

    f               shift and go to state 15

    F3                             shift and go to state 16

state 11

    (3) F1 -> LPARENT F2 RPARENT .

    $end            reduce using rule 3 (F1 -> LPARENT F2 RPARENT .)


state 12

    (6) F2 -> F2 AND . F2
    (6) F2 -> . F2 AND F2
    (7) F2 -> . F2 OR F2
    (8) F2 -> . f

    f               shift and go to state 8

    F2                             shift and go to state 17

state 13

    (7) F2 -> F2 OR . F2
    (6) F2 -> . F2 AND F2
    (7) F2 -> . F2 OR F2
    (8) F2 -> . f

    f               shift and go to state 8

    F2                             shift and go to state 18

state 14

    (4) F1 -> ONEOF LPARENT F3 . RPARENT

    RPARENT         shift and go to state 19


state 15

    (9) F3 -> f . SEMICOLON F3
    (10) F3 -> f .

    SEMICOLON       shift and go to state 20
    RPARENT         reduce using rule 10 (F3 -> f .)


state 16

    (5) F1 -> SEQ LPARENT F3 . RPARENT

    RPARENT         shift and go to state 21


state 17

    (6) F2 -> F2 AND F2 .
    (6) F2 -> F2 . AND F2
    (7) F2 -> F2 . OR F2

    RPARENT         reduce using rule 6 (F2 -> F2 AND F2 .)
    AND             reduce using rule 6 (F2 -> F2 AND F2 .)
    OR              reduce using rule 6 (F2 -> F2 AND F2 .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 13 ]


state 18

    (7) F2 -> F2 OR F2 .
    (6) F2 -> F2 . AND F2
    (7) F2 -> F2 . OR F2

    RPARENT         reduce using rule 7 (F2 -> F2 OR F2 .)
    OR              reduce using rule 7 (F2 -> F2 OR F2 .)
    AND             shift and go to state 12

  ! AND             [ reduce using rule 7 (F2 -> F2 OR F2 .) ]
  ! OR              [ shift and go to state 13 ]


state 19

    (4) F1 -> ONEOF LPARENT F3 RPARENT .

    $end            reduce using rule 4 (F1 -> ONEOF LPARENT F3 RPARENT .)


state 20

    (9) F3 -> f SEMICOLON . F3
    (9) F3 -> . f SEMICOLON F3
    (10) F3 -> . f

    f               shift and go to state 15

    F3                             shift and go to state 22

state 21

    (5) F1 -> SEQ LPARENT F3 RPARENT .

    $end            reduce using rule 5 (F1 -> SEQ LPARENT F3 RPARENT .)


state 22

    (9) F3 -> f SEMICOLON F3 .

    RPARENT         reduce using rule 9 (F3 -> f SEMICOLON F3 .)

